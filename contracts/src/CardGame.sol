// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "./DummyVRF.sol";

/*
 * Interface for the solidity verifier generated by snarkjs.
 */
interface IVerifier {
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[2] memory input
    ) external view returns (bool);
}

contract CardGame {
    struct Player {
        uint256 randCommit;
        address addr;
    }

    Player A;
    Player B;
    uint256 nRounds;
    uint256 currentRound;
    DummyVRF vrf;
    IVerifier verifierContract;

    constructor(uint256 _nRounds, address _verifierAddress) {
        nRounds = _nRounds;
        currentRound = 0;

        vrf = new DummyVRF();
        verifierContract = IVerifier(_verifierAddress);
    }

    function claimPlayerA(uint256 randCommit) external {
        require(A.addr == address(0), "Player A has already been claimed.");
        A = Player(randCommit, msg.sender);
    }

    function claimPlayerB(uint256 randCommit) external {
        require(A.addr == address(0), "Player B has already been claimed.");
        B = Player(randCommit, msg.sender);
    }

    function playCard()

    function move(uint256) public view {
        require(
            p1Commitment != 0,
            "Player 1 should commit to some random field element"
        );
        require(
            p2Commitment != 0,
            "Player 2 should commit to some random field element"
        );
        require(msg.sender == getCurrentPlayerAddress(), "It's not your turn");
    }
}
